import { Test, TestingModule } from '@nestjs/testing';
import { MessageService } from './message.service';
import { CustomException } from '../common/exception/custom.exception';
import { localisedStrings } from '../i18n/Gujrati/localised-strings';
import axios from 'axios';
describe('KhabriMediaApiService', () => {
  let service: MessageService;

  beforeEach(async () => {
    const module: TestingModule = await Test.createTestingModule({
      providers: [MessageService],
    }).compile();

    service = module.get<MessageService>(MessageService);
  });

// Generated by CodiumAI

describe('MessageService', () => {

    // prepareWelcomeMessage returns a string containing the welcome message
    it('should return a string containing the welcome message', async () => {
      const messageService = new MessageService();
      const welcomeMessage = await messageService.prepareWelcomeMessage();
      expect(typeof welcomeMessage).toBe('string');
      expect(welcomeMessage).toEqual(localisedStrings.welcomeMessage);
    });

    // getSeeMoreButtonLabel returns a string containing the see more message
    it('should return a string containing the see more message', () => {
      const messageService = new MessageService();
      const seeMoreButtonLabel = messageService.getSeeMoreButtonLabel();
      expect(typeof seeMoreButtonLabel).toBe('string');
      expect(seeMoreButtonLabel).toEqual(localisedStrings.seeMoreMessage);
    });

    // sendMessage sends a POST request to the specified baseUrl with the provided requestData and token, and returns the response data
    it('should send a POST request and return the response data', async () => {
      const baseUrl = 'https://example.com/api';
      const requestData = { message: 'Hello' };
      const token = '1234567890';
      const responseData = { success: true };
      axios.post = jest.fn().mockResolvedValueOnce({ data: responseData });

      const messageService = new MessageService();
      const response = await messageService.sendMessage(baseUrl, requestData, token);

      expect(axios.post).toHaveBeenCalledWith(baseUrl, requestData, {
        headers: {
          Authorization: `Bearer ${token}`,
          'Content-Type': 'application/json',
        },
      });
      expect(response).toEqual(responseData);
    });

    // sendMessage throws a CustomException if an error occurs during the POST request
    it('should throw a CustomException if an error occurs during the POST request', async () => {
      const baseUrl = 'https://example.com/api';
      const requestData = { message: 'Hello' };
      const token = '1234567890';
      const error = new Error('Request failed');
      axios.post = jest.fn().mockRejectedValueOnce(error);

      const messageService = new MessageService();

      await expect(messageService.sendMessage(baseUrl, requestData, token)).rejects.toThrow(CustomException);
    });


});



});
